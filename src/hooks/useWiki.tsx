import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from './use-toast';

export interface WikiArticle {
  id: string;
  user_id?: string;
  title: string;
  slug: string;
  content: string;
  excerpt?: string;
  category: string;
  tags: string[];
  is_published: boolean;
  featured: boolean;
  view_count: number;
  created_at: string;
  updated_at: string;
  created_by: string;
  updated_by: string;
}

export interface WikiCategory {
  id: string;
  name: string;
  description?: string;
  icon: string;
  color: string;
  sort_order: number;
  created_at: string;
}

export function useWiki() {
  const [articles, setArticles] = useState<WikiArticle[]>([]);
  const [categories, setCategories] = useState<WikiCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const fetchArticles = async () => {
    try {
      let query = supabase
        .from('wiki_articles')
        .select('*')
        .eq('is_published', true)
        .order('featured', { ascending: false })
        .order('created_at', { ascending: false });

      if (selectedCategory !== 'all') {
        query = query.eq('category', selectedCategory);
      }

      if (searchTerm) {
        query = query.or(`title.ilike.%${searchTerm}%,content.ilike.%${searchTerm}%,excerpt.ilike.%${searchTerm}%`);
      }

      const { data, error } = await query;

      if (error) throw error;
      setArticles(data || []);
    } catch (error: any) {
      toast({
        title: "Error fetching articles",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  const fetchCategories = async () => {
    try {
      const { data, error } = await supabase
        .from('wiki_categories')
        .select('*')
        .order('sort_order');

      if (error) throw error;
      setCategories(data || []);
    } catch (error: any) {
      toast({
        title: "Error fetching categories",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  const getArticleBySlug = async (slug: string): Promise<WikiArticle | null> => {
    try {
      const { data, error } = await supabase
        .from('wiki_articles')
        .select('*')
        .eq('slug', slug)
        .eq('is_published', true)
        .single();

      if (error) throw error;

      // Increment view count
      if (data) {
        await supabase
          .from('wiki_articles')
          .update({ view_count: data.view_count + 1 })
          .eq('id', data.id);
      }

      return data;
    } catch (error: any) {
      toast({
        title: "Error fetching article",
        description: error.message,
        variant: "destructive",
      });
      return null;
    }
  };

  const createArticle = async (articleData: Omit<WikiArticle, 'id' | 'created_at' | 'updated_at' | 'slug' | 'view_count'>) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        toast({
          title: "Authentication required",
          description: "You must be logged in to create articles",
          variant: "destructive",
        });
        return null;
      }

      const { data, error } = await supabase
        .from('wiki_articles')
        .insert({
          ...articleData,
          user_id: user.id,
          created_by: user.email || 'Unknown',
          updated_by: user.email || 'Unknown',
          slug: '', // Will be auto-generated by the trigger
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Article created",
        description: `Article "${articleData.title}" has been created successfully`,
      });

      await fetchArticles();
      return data;
    } catch (error: any) {
      toast({
        title: "Error creating article",
        description: error.message,
        variant: "destructive",
      });
      return null;
    }
  };

  const updateArticle = async (id: string, updates: Partial<WikiArticle>) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        toast({
          title: "Authentication required",
          description: "You must be logged in to update articles",
          variant: "destructive",
        });
        return null;
      }

      const { data, error } = await supabase
        .from('wiki_articles')
        .update({
          ...updates,
          updated_by: user.email || 'Unknown',
        })
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Article updated",
        description: "Article has been updated successfully",
      });

      await fetchArticles();
      return data;
    } catch (error: any) {
      toast({
        title: "Error updating article",
        description: error.message,
        variant: "destructive",
      });
      return null;
    }
  };

  const deleteArticle = async (id: string) => {
    try {
      const { error } = await supabase
        .from('wiki_articles')
        .delete()
        .eq('id', id);

      if (error) throw error;

      toast({
        title: "Article deleted",
        description: "Article has been deleted successfully",
      });

      await fetchArticles();
      return true;
    } catch (error: any) {
      toast({
        title: "Error deleting article",
        description: error.message,
        variant: "destructive",
      });
      return false;
    }
  };

  const getFeaturedArticles = () => {
    return articles.filter(article => article.featured).slice(0, 3);
  };

  const getRecentArticles = () => {
    return articles.slice(0, 5);
  };

  const getPopularArticles = () => {
    return [...articles].sort((a, b) => b.view_count - a.view_count).slice(0, 5);
  };

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      await Promise.all([fetchArticles(), fetchCategories()]);
      setLoading(false);
    };

    loadData();
  }, [searchTerm, selectedCategory]);

  return {
    articles,
    categories,
    loading,
    searchTerm,
    setSearchTerm,
    selectedCategory,
    setSelectedCategory,
    getArticleBySlug,
    createArticle,
    updateArticle,
    deleteArticle,
    getFeaturedArticles,
    getRecentArticles,
    getPopularArticles,
    refetch: () => Promise.all([fetchArticles(), fetchCategories()]),
  };
}